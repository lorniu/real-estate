;;; load dependencies
(ql:quickload 'closer-mop)
(push :hunchentoot-no-ssl *features*)
(ql:quickload 'hunchentoot)
(ql:quickload 'cl-who)
(ql:quickload 'parenscript)
(ql:quickload 'ironclad)
(ql:quickload 'uuid)
(ql:quickload 'clsql)
(push #P"/usr/lib/mysql" CLSQL-SYS:*FOREIGN-LIBRARY-SEARCH-PATHS*)
(clsql:push-library-path "/usr/lib/mysql/")
(uffi:load-foreign-library "/usr/lib/mysql/libmysqlclient.so")
;(ql:quickload 'clsql-mysql)

;;; declare package
(defpackage :cv
  (:use :common-lisp :cl-user :cl-who :ps :hunchentoot))
;; :closer-mop :ironclad :cv-persistence :cv-templates))

(in-package :cv)

(defvar *project-load-path* "/projects/cv/")
;;(defvar *project-load-path* "D:/htdocs/lisp/cv/")

(defun project-load (file-path)
  (load (concatenate 'string *project-load-path* file-path)))

(project-load "utils.lisp")
(project-load "persistence.lisp")
(project-load "templates.lisp")

;;(use-package :cv-persistence)
;;(use-package :cv-templates)

;;;start server
(defvar *htoot*
  (hunchentoot:start
   (make-instance 'hunchentoot:easy-acceptor :port 4242)))

(defun default-lang () "geo")

(defun cv-tr (keyword &key lang)
  (tr keyword (or lang (session-value 'lang) (default-lang))))

;;;connect to mysql
;;deprecated: non-threadsafe
;;(defvar *conn*
  ;;(cv-connect-db 
   ;;'("localhost" "cv_db" "root" "hardword")))
   ;;   '("localhost" "cv_db" "luka" "tommarvoloriddle1")))


(defmacro htoot-handler ((page-name uri params) &body body)
  `(hunchentoot:define-easy-handler (,page-name :uri ,uri) (,@params)
     (setf (hunchentoot:content-type*) "text/html")
     ,@body))

(htoot-handler (home "/" ())
	       (cv-main :title "Workbook 1.0!"
			:body (cv-firstpage)))

(htoot-handler
 (account-page-handler "/account" ())
 (cv-main 
  :title (cv-tr :account-settings)
  :body   (if (session-value 'logged-in-p) 
	      (account-page (ix-user (session-value 'user-authed)))
	    (+s (cv-tr :not-logged-in-please-log-in)
		(login-page :redir "/account")))))

(htoot-handler (company-profile "/company" (ix-company))
  (if (parse-integer ix-company :junk-allowed t)
      (let ((profile (single-company (parse-integer ix-company))))
	(if profile
	    (cv-main
	     :title (smake "Company profile: " (slot-value profile 'name-geo))
	     :body
	     (format
	      nil
	      "TODO: profilis gverdi <br>kompaniis dasaxeleba qartulad: ~a"
	      (slot-value profile 'name-geo)))))
      "Incorrect parameters!"))

(htoot-handler (view-employee-handler "/employee" (ix-employee))
  (if (parse-integer ix-employee :junk-allowed t)
      (let ((emp (single-employee (parse-integer ix-employee))))
	(if emp
	    (cv-main
	     :title (smake "Employee: " (firstname-geo emp)
			   "" (lastname-geo emp))
	     :body
	     (format
	      nil
	      "TODO: tanamshromlis gverdi <br>saxeli da gvari: ~a"
	      (+s (firstname-geo emp) " " (lastname-geo emp))))))
      "Incorrect parameters!"))

(htoot-handler (vacancies-page-handler "/vacancies" ())
  (cv-main
   :title (cv-tr :vacancies-page-title)
   :body (vacancies-page)))

(htoot-handler (elibrary-page-handler "/elibrary" ())
  (cv-main
   :title (cv-tr :elibrary-page-title)
   :body (e-library-home)))

(htoot-handler (workbooks-page-handler "/workbooks" ())
  (if (session-value 'logged-in-p)
      (let ((users-company (single-company 
			    (ix-company (session-value 'user-authed)))))
	(cv-main
	 :title (cv-tr :workbooks-page-title)
	 :body (if users-company
		   (company-profile-page
		    (ix-company users-company))
		   (smake (cv-tr :no-companies-associated) " "
			  "<a href='./edit-company?ix-company=0' 
                           class='underline'>"
			  (cv-tr :add-your-company-link) "</a>"))))
      (login-page-handler :redir "/workbooks")))

(htoot-handler
 (log-in-handler
  "/login-handler"
  ((redir :request-type :POST :parameter-type 'string :init-form "/")
   (usr :request-type :POST :parameter-type 'string)
   (pwd :request-type :POST :parameter-type 'string)))
  (cv-main 
   :title (cv-tr :login-page-title)
   :body 
   (if 
    (session-value 'logged-in-p)
    (cv-tr :already-logged-in)
    (let ((user-authed (user-if-valid usr pwd)))
      (if user-authed 
	  (progn
	    (start-session)
	    (setf (session-value 'user-authed) user-authed)
	    (setf (session-value 'logged-in-p) t)
	    (redirect redir));"successfully logged in")
	  (cv-tr :couldnt-log-in))))))

(htoot-handler
 (register-page-handler
  "/register" ())
 (cv-main
  :title (cv-tr :register-page-title)
  :body
  (if (session-value 'logged-in-p)
      (cv-tr :already-logged-in)
    (let ((reg-token (+s (uuid:make-v4-uuid))))
      (progn
	(setf (session-value 'reg-token) reg-token)
	(register-page :reg-token reg-token))))))

(htoot-handler
 (register-handler
  "/register-handler"
  ((usr :request-type :POST :parameter-type 'string :init-form nil)
   (pwd :request-type :POST :parameter-type 'string :init-form nil)
   (reg-token :request-type :POST :parameter-type 'string :init-form nil)))
 (if (session-value 'logged-in-p)
     (cv-tr :already-logged-in)
   (if (and usr pwd reg-token
	    (plusp (length usr)) (plusp (length pwd))
	    (string= (session-value 'reg-token) reg-token))
       (let ((usr-to-save
	      (make-instance 'user
			     :login-name usr
			     :passwd (hash-password pwd))))
	 (if (plusp (save-user usr-to-save))
	     (cv-tr :registration-successful)
	     (cv-tr :couldnt-register-correct-errors)))
       (cv-tr :couldnt-save-user))))
					 

(htoot-handler
    (log-out-handler "/logout" ())
  (cv-main 
   :title (cv-tr :logout-page-title)
   :body (if (session-value 'logged-in-p)
	     (progn
	       (setf (session-value 'logged-in-p) nil)
	       (remove-session *session*)
	       (redirect "/"));"you are now logged out")
	     (redirect "/"))));"you are not logged in")))

(htoot-handler
    (login-page-handler
     "/login"
     ((redir :request-type :GET :parameter-type 'string :init-form "/")))
  (cv-main 
   :title (cv-tr :login-page-title)
   :body (if (session-value 'logged-in-p)
	     (cv-firstpage)
	     (login-page :redir redir))))

(htoot-handler
 (filter-vacancies-handler
  "/filter-vacancies"
  (company-name-geo 
   company-name-eng paycheck-min paycheck-max working-hours-type is-intern
   langs-should-known-id-list drivers-license payment-type ix-emp-pos-cat
   ix-emp-pos age added-after expires-after search-desc))
  (smake
   (append
    (list "<table id='vac-table'>")
    (list 
     (format 
      nil "<thead>~{<th>~a</th>~}</thead>" 
;;;   '("company-name-geo" "company-name-eng" "paycheck" "working-hours-type"
;;;	"is-intern" "langs-known-ids" "drivers-license" "payment-type" 
;;;	"age-min" "age-max" "date-added" "date-expire" "years-exp" "job-desc"
;;;	"emp-pos")
      (list (cv-tr :company-name) (cv-tr :emp-pos) (cv-tr :drivers-license-required)
	    (cv-tr :add-date) (cv-tr :expire-date))))
    (loop
       for next-vac
       in
	 (filter-vacancies
	  :company-name-geo company-name-geo :company-name-eng company-name-eng
	  :paycheck-min paycheck-min :paycheck-max paycheck-max
	  :working-hours-type working-hours-type :is-intern is-intern 
	  :langs-should-known-id-list langs-should-known-id-list 
	  :drivers-license drivers-license :payment-type payment-type 
	  :ix-emp-pos-cat ix-emp-pos-cat :ix-emp-pos ix-emp-pos :age age
	  :added-after added-after :expires-after expires-after
	  :search-desc search-desc)
       collect
       (format
	nil
	"<tr>~{<td>~a</td>~}</tr>"
	(mapcar
	 #'(lambda (field) 
	     (cond
	      ((or (eql field 'company-name-geo)
		   (eql field 'company-name-eng))
	       (format nil "<a href='./vacancy?ix-vacancy=~a'>~a</a>"
		       (ix-vacancy next-vac) (slot-value next-vac field)))
	      ((eql field 'drivers-license) 
	       (if (= 1 (slot-value next-vac field))
		   "yes"
		 "no"))
	      ((eql field 'paycheck) 
	       (smake (slot-value next-vac field) " " (cv-tr :gel)))
	      ((eql field 'working-hours-type)
	       (smake (slot-value next-vac field)
		      " " (cv-tr :working-hours-type)))
	      ((eql field 'emp-pos)
	       (if 
		   (slot-value next-vac field)
		   (slot-value (slot-value next-vac field) 'name-geo)
		 ""))
	      (t (slot-value next-vac field))))
	 '(company-name-geo emp-pos drivers-license date-added date-expire
	   ;;paycheck working-hours-type
	   ;;is-intern langs-known-ids payment-type age-min
	   ;;age-max years-exp job-desc
	   ))))
    (list "</table>"))))


(htoot-handler
    (view-vacancy-handler
     "/vacancy"
     ((ix-vacancy :request-type :GET :parameter-type 'integer :init-form 0)))
     (let ((view-vac (single-vacancy ix-vacancy)))
       (if view-vac
	   (cv-main
	    :title (cv-tr :view-vacancy)
	    :body (view-vacancy-page view-vac))
	   "Incorrect Parameters!")))

(htoot-handler
    (save-company-handler
     "/save-company"
     ((ix-company :request-type :GET :parameter-type 'integer :init-form 0)
      (ident-code :request-type :POST :parameter-type 'string)
      (legal-form :request-type :POST :parameter-type 'string)
      (name-geo :request-type :POST :parameter-type 'string)
      (name-eng :request-type :POST :parameter-type 'string)
      (balance :request-type :POST :parameter-type 'string)
      (desc :request-type :POST :parameter-type 'string)))
  (let ((company-to-save 
	 (make-instance 
	  'company :ix-company ix-company
	  :ident-code ident-code :legal-form legal-form
	  :name-geo name-geo :name-eng name-eng
	  :balance (smake balance) :description desc)))
    (let* ((ins-id (save-company company-to-save))
	   (owner-user (single-user (ix-user (session-value 'user-authed))))
	   (upd-user-result
	    (progn
	      (setf (ix-company owner-user) ins-id)
	      (setf (ix-company (session-value 'user-authed)) ins-id)
	      (update-object-slot owner-user 'ix-company)))
	   (title (if (plusp ins-id)
		      (cv-tr :company-saved)
		      (cv-tr :couldnt-save-company)))
	   (body (if (plusp ins-id)
		     (smake (cv-tr :company-saved)
			    "<a href='./company?ix-company="
			    ins-id "'>" (cv-tr :view) "</a>")
		     (cv-tr :couldnt-save-company))))
      (cv-main :title title :body body))))

(htoot-handler
    (edit-company
     "/edit-company"
     ((ix-company :request-type :GET :parameter-type 'integer :init-form 0)))
  (cv-main
   :title (format nil "Edit company #~a" ix-company)
   :body
   (if (not (minusp ix-company))
       (edit-company-page ix-company)
       (cv-tr :wrong-parameters))))

(htoot-handler
 (edit-employee
  "/edit-employee"
  ((ix-employee :request-type :GET :parameter-type 'integer :init-form 0)
   (ix-company :request-type :GET :parameter-type 'integer :init-form nil)))
 (let ((ix-company-to-save (or ix-company 
			       (ix-company (session-value 'user-authed)))))
 (cv-main
  :title (format nil "Edit employee #~a" ix-employee)
  :body
  (if (not (minusp ix-employee))
      (edit-employee-page ix-employee ix-company-to-save)
      (cv-tr :wrong-parameters)))))

(htoot-handler
 (edit-work-period
  "/edit-work-period"
  ((ix-work-period :request-type :GET :parameter-type 'integer :init-form 0)
   (ix-company :request-type :GET :parameter-type 'integer :init-form nil)
   (ix-employee :request-type :GET :parameter-type 'integer :init-form nil)))
 (let ((ix-company-to-save (or ix-company 
			       (ix-company (session-value 'user-authed)))))
 (cv-main
  :title (format nil "Edit work-period #~a" ix-work-period)
  :body
  (if (and (<= 0 ix-work-period) ix-employee (plusp ix-employee))
      (edit-work-period-page ix-work-period :ix-company ix-company-to-save
			     :ix-employee ix-employee)
      (cv-tr :wrong-parameters)))))

(htoot-handler
    (edit-emp-pos
     "/edit-emp-pos"
     ((ix-emp-pos :request-type :GET :parameter-type 'integer
			    :init-form 0)))
  (cv-main
   :title (format nil "Edit employee position #~a" ix-emp-pos)
   :body
   (if (not (minusp ix-emp-pos))
       (edit-emp-pos-page ix-emp-pos)
       (cv-tr :wrong-parameters))))

(htoot-handler
 (edit-emp-pos-cat
  "/edit-emp-pos-cat"
  ((ix-emp-pos-cat
    :request-type :GET :parameter-type 'integer :init-form 0)))
 (cv-main
  :title (format nil "Edit employee position category #~a"
		 ix-emp-pos-cat)
  :body
  (if (not (minusp ix-emp-pos-cat))
      (edit-emp-pos-cat-page ix-emp-pos-cat)
    (cv-tr :wrong-parameters))))

(htoot-handler
 (save-emp-pos-handler
  "/save-emp-pos"
  ((ix-emp-pos :request-type :GET :parameter-type 'integer :init-form 0)
   (name-geo :request-type :POST :parameter-type 'string :init-form "")
   (name-eng :request-type :POST :parameter-type 'string :init-form "")
   (ix-emp-pos-cat :request-type :POST :parameter-type 'integer
				  :init-form "")))
  (let ((emp-pos-to-save
	 (make-instance
	  'emp-pos :ix-emp-pos ix-emp-pos
	  :name-geo name-geo :name-eng name-eng
	  :ix-emp-pos-cat ix-emp-pos-cat)))
    (let* ((ins-id (save-emp-pos emp-pos-to-save))
	   (title (if (plusp ins-id) 
		      (cv-tr :emp-pos-saved)
		      (cv-tr :couldnt-save-emp-pos)))
	   (body (if (plusp ins-id)
		     (smake (cv-tr :emp-pos-saved)
			    "<a href='./emp-pos?ix-emp-pos="
			    ins-id "'>" (cv-tr :view) "</a>")
		     (cv-tr :couldnt-save-emp-pos))))
      (cv-main :title title :body body))))

(htoot-handler
 (save-emp-pos-cat-handler
  "/save-emp-pos-cat"
  ((ix-emp-pos-cat :request-type :GET :parameter-type 'integer :init-form 0)
   (name-geo :request-type :POST :parameter-type 'string :init-form "")
   (name-eng :request-type :POST :parameter-type 'string :init-form "")))
  (let ((emp-pos-cat-to-save
	 (make-instance
	  'emp-pos-cat :ix-emp-pos-cat ix-emp-pos-cat
	  :name-geo name-geo :name-eng name-eng)))
    (let* ((ins-id (save-emp-pos-cat emp-pos-cat-to-save))
	   (title (if (plusp ins-id) 
		      (cv-tr :emp-pos-cat-saved)
		      (cv-tr :couldnt-save-emp-pos-cat)))
	   (body (if (plusp ins-id)
		     (smake (cv-tr :emp-pos-cat-saved)
			    "<a href='./emp-pos-cat?ix-emp-pos-cat="
			    ins-id "'>" (cv-tr :view) "</a>")
		     (cv-tr :couldnt-save-emp-pos-cat))))
      (cv-main :title title :body body))))

(htoot-handler
 (save-employee-handler
  "/save-employee"
  ((ix-employee :request-type :GET :parameter-type 'integer :init-form 0)
   (ident-code :request-type :POST :parameter-type 'string :init-form "")
   (firstname-geo :request-type :POST :parameter-type 'string :init-form "")
   (lastname-geo :request-type :POST :parameter-type 'string :init-form "")
   (firstname-eng :request-type :POST :parameter-type 'string :init-form "")
   (lastname-eng :request-type :POST :parameter-type 'string :init-form "")
   (birth-date :request-type :POST :parameter-type 'string :init-form "")
   (profession :request-type :POST :parameter-type 'string :init-form "")
   (specialization :request-type :POST :parameter-type 'string :init-form "")
   (education :request-type :POST :parameter-type 'string :init-form "")
   (ix-emp-pos :request-type :POST :parameter-type 'integer :init-form 0)
   (start :request-type :POST :parameter-type 'integer :init-form 0)
   (end :request-type :POST :parameter-type 'integer :init-form 0)))
 (let ((employee-to-save
	(make-instance
	 'employee :ix-employee ix-employee
	 :unique-link (or (and (single-employee ix-employee)
			       (unique-link (single-employee ix-employee)))
			  (+s (uuid:make-v4-uuid)))
	 :ident-code ident-code
	 :firstname-geo firstname-geo :lastname-geo lastname-geo
	 :firstname-eng firstname-eng :lastname-eng lastname-eng
	 :birth-date birth-date :profession profession
	 :specialization specialization :education education)))
       ;;when adding employee, it's neccessary to add a working period
       ;;too. company cannot add employee that's not working there
   (let* ((ins-id (save-employee employee-to-save))
	  (wp-while-working-here
	   (if (= ix-employee 0)
	       (make-instance
		'work-period :ix-work-period 0
		:ix-employee ins-id
		:ix-company (ix-company (session-value 'user-authed))
		:ix-emp-pos ix-emp-pos :start start :end end :active 1)
	     nil))
	  (wp-ins-id (if (= ix-employee 0)
			 (save-work-period wp-while-working-here)
		       nil))
	  (title (if (plusp ins-id) 
		     (cv-tr :employee-saved)
		     (cv-tr :couldnt-save-employee)))
	  (body (if (plusp ins-id)
		    (smake (cv-tr :employee-saved)
			   "<a href='./employee?ix-employee="
			   ins-id "'>" (cv-tr :view) "</a>")
		    (cv-tr :couldnt-save-employee))))
     (cv-main :title title :body body))))

(htoot-handler
 (save-work-period-handler
  "/save-work-period"
  ((ix-work-period :request-type :GET :parameter-type 'integer :init-form 0)
   (ix-company :request-type :POST :parameter-type 'integer :init-form nil)
   (ix-employee :request-type :POST :parameter-type 'integer :init-form nil)
   (ix-emp-pos :request-type :POST :parameter-type 'integer :init-form nil)
   (start :request-type :POST :parameter-type 'integer :init-form nil)
   (end :request-type :POST :parameter-type 'integer :init-form nil)
   (active :request-type :POST :parameter-type 'integer :init-form nil)))
 (let ((wp-to-save
	(make-instance
	 'work-period :ix-work-period ix-work-period
	 :ix-company ix-company :ix-employee ix-employee
	 :ix-emp-pos ix-emp-pos :start start :end end :active active)))
   (let* ((ins-id (save-work-period wp-to-save))
	  (title (if (plusp ins-id) 
		     (cv-tr :work-period-saved)
		     (cv-tr :couldnt-save-work-period)))
	  (body (if (plusp ins-id)
		    (smake (cv-tr :work-period-saved)
			   "<a href='./work-period?ix-work-period="
			   ins-id "'>" (cv-tr :view) "</a>")
		    (cv-tr :couldnt-save-work-period))))
     (cv-main :title title :body body))))

(htoot-handler 
    (save-vacancy-handler 
     "/save-vacancy"
     ((ix-vacancy :request-type :GET :parameter-type 'integer :init-form 0)
      (company-name-geo :request-type :POST :parameter-type 'string
			:init-form "")
      (company-name-eng :request-type :POST :parameter-type 'string
			:init-form "")
      (paycheck :request-type :POST :parameter-type 'integer)
      (working-hours-type :request-type :POST :parameter-type 'integer)
      (is-intern :request-type :POST :parameter-type 'integer)
      (langs-known-ids :request-type :POST :parameter-type 'string)
      (drivers-license :request-type :POST :parameter-type 'integer)
      (payment-type :request-type :POST :parameter-type 'integer)
      (ix-emp-pos :request-type :POST :parameter-type 'integer)
      (age-min :request-type :POST :parameter-type 'integer)
      (age-max :request-type :POST :parameter-type 'integer)
      (date-added :request-type :POST :parameter-type 'integer)
      (date-expire :request-type :POST :parameter-type 'integer)
      (years-exp :request-type :POST :parameter-type 'integer)
      (job-desc :request-type :POST :parameter-type 'string)))
  (let ((vacancy-to-save 
	 (make-instance 
	  'vacancy :ix-vacancy ix-vacancy
	  :ix-user (slot-value (session-value 'user-authed) 'ix-user)
	  :company-name-geo company-name-geo :company-name-eng company-name-eng
	  :paycheck paycheck :working-hours-type working-hours-type
	  :is-intern is-intern :angs-known-ids langs-known-ids
	  :drivers-license drivers-license :payment-type payment-type
	  :ix-emp-pos ix-emp-pos
	  :age-min age-min :age-max age-max :date-added date-added
	  :date-expire date-expire :years-exp years-exp :job-desc job-desc)))
    (let* ((ins-id (save-vacancy vacancy-to-save))
	   (title (if (plusp ins-id) 
		      (cv-tr :vacancy-saved)
		      (cv-tr :couldnt-save-vacancy)))
	   (body (if (plusp ins-id)
		     (smake (cv-tr :vacancy-saved)
			    "<a href='./vacancy?ix-vacancy="
			    ins-id "'>" (cv-tr :view) "</a>")
		     (cv-tr :couldnt-save-vacancy))))
      (cv-main :title title :body body))))

(htoot-handler
    (edit-vacancy
     "/edit-vacancy"
     ((ix-vacancy :request-type :GET :parameter-type 'integer :init-form 0)))
  (if (session-value 'logged-in-p)
      (cv-main
       :title (format nil "Edit vacancy #~a" ix-vacancy)
       :body
       (if (not (minusp ix-vacancy))
	   (edit-vacancy-page ix-vacancy)
	   (cv-tr :wrong-parameters)))
      (login-page-handler :redir (smake "/edit-vacancy?ix-vacancy="
					ix-vacancy))))